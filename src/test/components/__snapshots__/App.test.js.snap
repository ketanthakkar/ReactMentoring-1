// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should be like snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    getItems={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <ErrorBoundary>
          <Header
            appState=""
            getItems={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
              }
            }
            items={Array []}
          />
        </ErrorBoundary>,
        <ErrorBoundary>
          <Items
            getItems={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
              }
            }
          />
        </ErrorBoundary>,
        <ErrorBoundary>
          <Footer />
        </ErrorBoundary>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Header
            appState=""
            getItems={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
              }
            }
            items={Array []}
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "appState": "",
            "getItems": [MockFunction] {
              "calls": Array [
                Array [],
              ],
            },
            "items": Array [],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Items
            getItems={
              [MockFunction] {
                "calls": Array [
                  Array [],
                ],
              }
            }
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "getItems": [MockFunction] {
              "calls": Array [
                Array [],
              ],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Footer />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ErrorBoundary>
            <Header
              appState=""
              getItems={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                }
              }
              items={Array []}
            />
          </ErrorBoundary>,
          <ErrorBoundary>
            <Items
              getItems={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                }
              }
            />
          </ErrorBoundary>,
          <ErrorBoundary>
            <Footer />
          </ErrorBoundary>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Header
              appState=""
              getItems={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                }
              }
              items={Array []}
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "appState": "",
              "getItems": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
              },
              "items": Array [],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Items
              getItems={
                [MockFunction] {
                  "calls": Array [
                    Array [],
                  ],
                }
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "getItems": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Footer />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
